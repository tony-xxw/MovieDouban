package mvp.wyyne.douban.moviedouban.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import mvp.wyyne.douban.moviedouban.api.model.WannaTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WANNA_TABLE".
*/
public class WannaTableDao extends AbstractDao<WannaTable, Long> {

    public static final String TABLENAME = "WANNA_TABLE";

    /**
     * Properties of entity WannaTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property AvatarUrl = new Property(1, String.class, "avatarUrl", false, "AVATAR_URL");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Directors = new Property(3, String.class, "directors", false, "DIRECTORS");
        public final static Property Casts = new Property(4, String.class, "casts", false, "CASTS");
        public final static Property Createtime = new Property(5, String.class, "createtime", false, "CREATETIME");
        public final static Property Average = new Property(6, String.class, "average", false, "AVERAGE");
        public final static Property Label = new Property(7, String.class, "label", false, "LABEL");
        public final static Property Reason = new Property(8, String.class, "reason", false, "REASON");
        public final static Property IsLabel = new Property(9, boolean.class, "isLabel", false, "IS_LABEL");
    }


    public WannaTableDao(DaoConfig config) {
        super(config);
    }
    
    public WannaTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WANNA_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"AVATAR_URL\" TEXT," + // 1: avatarUrl
                "\"TITLE\" TEXT," + // 2: title
                "\"DIRECTORS\" TEXT," + // 3: directors
                "\"CASTS\" TEXT," + // 4: casts
                "\"CREATETIME\" TEXT," + // 5: createtime
                "\"AVERAGE\" TEXT," + // 6: average
                "\"LABEL\" TEXT," + // 7: label
                "\"REASON\" TEXT," + // 8: reason
                "\"IS_LABEL\" INTEGER NOT NULL );"); // 9: isLabel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WANNA_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WannaTable entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(2, avatarUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String directors = entity.getDirectors();
        if (directors != null) {
            stmt.bindString(4, directors);
        }
 
        String casts = entity.getCasts();
        if (casts != null) {
            stmt.bindString(5, casts);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(6, createtime);
        }
 
        String average = entity.getAverage();
        if (average != null) {
            stmt.bindString(7, average);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(8, label);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(9, reason);
        }
        stmt.bindLong(10, entity.getIsLabel() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WannaTable entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(2, avatarUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String directors = entity.getDirectors();
        if (directors != null) {
            stmt.bindString(4, directors);
        }
 
        String casts = entity.getCasts();
        if (casts != null) {
            stmt.bindString(5, casts);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(6, createtime);
        }
 
        String average = entity.getAverage();
        if (average != null) {
            stmt.bindString(7, average);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(8, label);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(9, reason);
        }
        stmt.bindLong(10, entity.getIsLabel() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WannaTable readEntity(Cursor cursor, int offset) {
        WannaTable entity = new WannaTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // avatarUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // directors
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // casts
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createtime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // average
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // label
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // reason
            cursor.getShort(offset + 9) != 0 // isLabel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WannaTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAvatarUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDirectors(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCasts(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreatetime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAverage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLabel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setReason(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsLabel(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WannaTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WannaTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WannaTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
